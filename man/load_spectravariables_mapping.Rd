% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendMzVault-functions.R
\name{load_spectravariables_mapping}
\alias{load_spectravariables_mapping}
\title{Load a spectraVariables mapping}
\usage{
load_spectravariables_mapping(
  object,
  mapping = get_default_spectravariables_mapping(object)
)
}
\arguments{
\item{object}{a MsBackendMzVault object}

\item{mapping}{a list of definitions to transform database fields to SpectraVariables
\itemize{
\item the name is the spectraVariable to be assigned
\item the value is a list with elements \code{list(col = "", fun = identity)}
where \code{col} is the source column and \code{read_fun} is a function transforming
the source data into the spectraVariable data.
Up to now we abstain from:
\itemize{
\item backmapping for writing (TODO when writing is implemented)
\item complex non-1:1 mapping as done in SpectraMapping (a non-goal).
}
\item If the value is a \code{character} instead of a \code{list}, it is interpreted as
\code{list(col = value, read_fun = identity)}
\item If the value is a \code{function} instead of a \code{list}, it is interpreted as
\code{list(col = "acquistionNum", read_fun = value)}
\item The \code{read_fun = constant(v)} represents \code{function(x) rep(v, length(x))}
\item It is typically used as \code{value}, resulting in
\verb{list(col = acquisitionNum, read_fun = function(x) rep(v, length(x))}
\item The value \code{NA} represents \code{constant(NA)}
}}
}
\description{
Loads a spectraVariables mapping definition and transforms shorthand notation
into full definition.
}
